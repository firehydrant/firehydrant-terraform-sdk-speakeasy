// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"net/http"
)

type GetRunbookSelectOptionsRequest struct {
	IntegrationSlug string `pathParam:"style=simple,explode=false,name=integration_slug"`
	ActionSlug      string `pathParam:"style=simple,explode=false,name=action_slug"`
	Field           string `pathParam:"style=simple,explode=false,name=field"`
	// Text string of a query for filtering values.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Generic params used to add specificity (eg an id of some kind) to the select options request
	Scope *string `queryParam:"style=form,explode=true,name=scope"`
	// Maximum number of items to return.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
}

func (o *GetRunbookSelectOptionsRequest) GetIntegrationSlug() string {
	if o == nil {
		return ""
	}
	return o.IntegrationSlug
}

func (o *GetRunbookSelectOptionsRequest) GetActionSlug() string {
	if o == nil {
		return ""
	}
	return o.ActionSlug
}

func (o *GetRunbookSelectOptionsRequest) GetField() string {
	if o == nil {
		return ""
	}
	return o.Field
}

func (o *GetRunbookSelectOptionsRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *GetRunbookSelectOptionsRequest) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *GetRunbookSelectOptionsRequest) GetPerPage() *int {
	if o == nil {
		return nil
	}
	return o.PerPage
}

type GetRunbookSelectOptionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A collection of codes that generally means the end user got something wrong in making the request
	BadRequest *shared.BadRequest
	// A collection of codes that generally means the client was not authenticated correctly for the request they want to make
	Unauthorized *shared.Unauthorized
	// Status codes relating to the resource/entity they are requesting not being found or endpoints/routes not existing
	NotFound *shared.NotFound
	// Status codes relating to the client being rate limited by the server
	RateLimited *shared.RateLimited
	// A collection of status codes that generally mean the server failed in an unexpected way
	InternalServerError *shared.InternalServerError
	// Timeouts occurred with the request
	Timeout *shared.Timeout
}

func (o *GetRunbookSelectOptionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetRunbookSelectOptionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetRunbookSelectOptionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetRunbookSelectOptionsResponse) GetBadRequest() *shared.BadRequest {
	if o == nil {
		return nil
	}
	return o.BadRequest
}

func (o *GetRunbookSelectOptionsResponse) GetUnauthorized() *shared.Unauthorized {
	if o == nil {
		return nil
	}
	return o.Unauthorized
}

func (o *GetRunbookSelectOptionsResponse) GetNotFound() *shared.NotFound {
	if o == nil {
		return nil
	}
	return o.NotFound
}

func (o *GetRunbookSelectOptionsResponse) GetRateLimited() *shared.RateLimited {
	if o == nil {
		return nil
	}
	return o.RateLimited
}

func (o *GetRunbookSelectOptionsResponse) GetInternalServerError() *shared.InternalServerError {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *GetRunbookSelectOptionsResponse) GetTimeout() *shared.Timeout {
	if o == nil {
		return nil
	}
	return o.Timeout
}
