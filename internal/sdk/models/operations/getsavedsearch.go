// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"net/http"
)

type GetSavedSearchPathParamResourceType string

const (
	GetSavedSearchPathParamResourceTypeChangeEvents          GetSavedSearchPathParamResourceType = "change_events"
	GetSavedSearchPathParamResourceTypeIncidents             GetSavedSearchPathParamResourceType = "incidents"
	GetSavedSearchPathParamResourceTypeServices              GetSavedSearchPathParamResourceType = "services"
	GetSavedSearchPathParamResourceTypeScheduledMaintenances GetSavedSearchPathParamResourceType = "scheduled_maintenances"
	GetSavedSearchPathParamResourceTypeTicketTasks           GetSavedSearchPathParamResourceType = "ticket_tasks"
	GetSavedSearchPathParamResourceTypeTicketFollowUps       GetSavedSearchPathParamResourceType = "ticket_follow_ups"
	GetSavedSearchPathParamResourceTypeAnalytics             GetSavedSearchPathParamResourceType = "analytics"
	GetSavedSearchPathParamResourceTypeImpactAnalytics       GetSavedSearchPathParamResourceType = "impact_analytics"
	GetSavedSearchPathParamResourceTypeAlerts                GetSavedSearchPathParamResourceType = "alerts"
	GetSavedSearchPathParamResourceTypeIncidentEvents        GetSavedSearchPathParamResourceType = "incident_events"
)

func (e GetSavedSearchPathParamResourceType) ToPointer() *GetSavedSearchPathParamResourceType {
	return &e
}
func (e *GetSavedSearchPathParamResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "change_events":
		fallthrough
	case "incidents":
		fallthrough
	case "services":
		fallthrough
	case "scheduled_maintenances":
		fallthrough
	case "ticket_tasks":
		fallthrough
	case "ticket_follow_ups":
		fallthrough
	case "analytics":
		fallthrough
	case "impact_analytics":
		fallthrough
	case "alerts":
		fallthrough
	case "incident_events":
		*e = GetSavedSearchPathParamResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSavedSearchPathParamResourceType: %v", v)
	}
}

type GetSavedSearchRequest struct {
	ResourceType  GetSavedSearchPathParamResourceType `pathParam:"style=simple,explode=false,name=resource_type"`
	SavedSearchID string                              `pathParam:"style=simple,explode=false,name=saved_search_id"`
}

func (o *GetSavedSearchRequest) GetResourceType() GetSavedSearchPathParamResourceType {
	if o == nil {
		return GetSavedSearchPathParamResourceType("")
	}
	return o.ResourceType
}

func (o *GetSavedSearchRequest) GetSavedSearchID() string {
	if o == nil {
		return ""
	}
	return o.SavedSearchID
}

type GetSavedSearchResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Retrieve a specific save search
	SavedSearchEntity *shared.SavedSearchEntity
	// A collection of codes that generally means the end user got something wrong in making the request
	BadRequest *shared.BadRequest
	// A collection of codes that generally means the client was not authenticated correctly for the request they want to make
	Unauthorized *shared.Unauthorized
	// Status codes relating to the resource/entity they are requesting not being found or endpoints/routes not existing
	NotFound *shared.NotFound
	// Status codes relating to the client being rate limited by the server
	RateLimited *shared.RateLimited
	// A collection of status codes that generally mean the server failed in an unexpected way
	InternalServerError *shared.InternalServerError
	// Timeouts occurred with the request
	Timeout *shared.Timeout
}

func (o *GetSavedSearchResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetSavedSearchResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetSavedSearchResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetSavedSearchResponse) GetSavedSearchEntity() *shared.SavedSearchEntity {
	if o == nil {
		return nil
	}
	return o.SavedSearchEntity
}

func (o *GetSavedSearchResponse) GetBadRequest() *shared.BadRequest {
	if o == nil {
		return nil
	}
	return o.BadRequest
}

func (o *GetSavedSearchResponse) GetUnauthorized() *shared.Unauthorized {
	if o == nil {
		return nil
	}
	return o.Unauthorized
}

func (o *GetSavedSearchResponse) GetNotFound() *shared.NotFound {
	if o == nil {
		return nil
	}
	return o.NotFound
}

func (o *GetSavedSearchResponse) GetRateLimited() *shared.RateLimited {
	if o == nil {
		return nil
	}
	return o.RateLimited
}

func (o *GetSavedSearchResponse) GetInternalServerError() *shared.InternalServerError {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *GetSavedSearchResponse) GetTimeout() *shared.Timeout {
	if o == nil {
		return nil
	}
	return o.Timeout
}
