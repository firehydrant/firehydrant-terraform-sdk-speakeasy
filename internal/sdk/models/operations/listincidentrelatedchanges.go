// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"net/http"
)

// QueryParamType - The type of the relation to the incident
type QueryParamType string

const (
	QueryParamTypeCaused    QueryParamType = "caused"
	QueryParamTypeFixed     QueryParamType = "fixed"
	QueryParamTypeSuspect   QueryParamType = "suspect"
	QueryParamTypeDismissed QueryParamType = "dismissed"
)

func (e QueryParamType) ToPointer() *QueryParamType {
	return &e
}
func (e *QueryParamType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "caused":
		fallthrough
	case "fixed":
		fallthrough
	case "suspect":
		fallthrough
	case "dismissed":
		*e = QueryParamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamType: %v", v)
	}
}

type ListIncidentRelatedChangesRequest struct {
	Page    *int `queryParam:"style=form,explode=true,name=page"`
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// The type of the relation to the incident
	Type       *QueryParamType `queryParam:"style=form,explode=true,name=type"`
	IncidentID string          `pathParam:"style=simple,explode=false,name=incident_id"`
}

func (o *ListIncidentRelatedChangesRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListIncidentRelatedChangesRequest) GetPerPage() *int {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *ListIncidentRelatedChangesRequest) GetType() *QueryParamType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListIncidentRelatedChangesRequest) GetIncidentID() string {
	if o == nil {
		return ""
	}
	return o.IncidentID
}

type ListIncidentRelatedChangesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// List related changes that have been attached to an incident
	IncidentsRelatedChangeEventEntityPaginated *shared.IncidentsRelatedChangeEventEntityPaginated
	// A collection of codes that generally means the end user got something wrong in making the request
	BadRequest *shared.BadRequest
	// A collection of codes that generally means the client was not authenticated correctly for the request they want to make
	Unauthorized *shared.Unauthorized
	// Status codes relating to the resource/entity they are requesting not being found or endpoints/routes not existing
	NotFound *shared.NotFound
	// Status codes relating to the client being rate limited by the server
	RateLimited *shared.RateLimited
	// A collection of status codes that generally mean the server failed in an unexpected way
	InternalServerError *shared.InternalServerError
	// Timeouts occurred with the request
	Timeout *shared.Timeout
}

func (o *ListIncidentRelatedChangesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListIncidentRelatedChangesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListIncidentRelatedChangesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListIncidentRelatedChangesResponse) GetIncidentsRelatedChangeEventEntityPaginated() *shared.IncidentsRelatedChangeEventEntityPaginated {
	if o == nil {
		return nil
	}
	return o.IncidentsRelatedChangeEventEntityPaginated
}

func (o *ListIncidentRelatedChangesResponse) GetBadRequest() *shared.BadRequest {
	if o == nil {
		return nil
	}
	return o.BadRequest
}

func (o *ListIncidentRelatedChangesResponse) GetUnauthorized() *shared.Unauthorized {
	if o == nil {
		return nil
	}
	return o.Unauthorized
}

func (o *ListIncidentRelatedChangesResponse) GetNotFound() *shared.NotFound {
	if o == nil {
		return nil
	}
	return o.NotFound
}

func (o *ListIncidentRelatedChangesResponse) GetRateLimited() *shared.RateLimited {
	if o == nil {
		return nil
	}
	return o.RateLimited
}

func (o *ListIncidentRelatedChangesResponse) GetInternalServerError() *shared.InternalServerError {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *ListIncidentRelatedChangesResponse) GetTimeout() *shared.Timeout {
	if o == nil {
		return nil
	}
	return o.Timeout
}
