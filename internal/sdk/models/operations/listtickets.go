// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"net/http"
)

// ListTicketsQueryParamTagMatchStrategy - A matching strategy for the tags provided
type ListTicketsQueryParamTagMatchStrategy string

const (
	ListTicketsQueryParamTagMatchStrategyAny      ListTicketsQueryParamTagMatchStrategy = "any"
	ListTicketsQueryParamTagMatchStrategyMatchAll ListTicketsQueryParamTagMatchStrategy = "match_all"
	ListTicketsQueryParamTagMatchStrategyExclude  ListTicketsQueryParamTagMatchStrategy = "exclude"
)

func (e ListTicketsQueryParamTagMatchStrategy) ToPointer() *ListTicketsQueryParamTagMatchStrategy {
	return &e
}
func (e *ListTicketsQueryParamTagMatchStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "match_all":
		fallthrough
	case "exclude":
		*e = ListTicketsQueryParamTagMatchStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTicketsQueryParamTagMatchStrategy: %v", v)
	}
}

// State - Filter tickets by state
type State string

const (
	StateOpen       State = "open"
	StateInProgress State = "in_progress"
	StateCancelled  State = "cancelled"
	StateDone       State = "done"
)

func (e State) ToPointer() *State {
	return &e
}
func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "in_progress":
		fallthrough
	case "cancelled":
		fallthrough
	case "done":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

type ListTicketsRequest struct {
	Page    *int `queryParam:"style=form,explode=true,name=page"`
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// A comma separated list of tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
	// A matching strategy for the tags provided
	TagMatchStrategy *ListTicketsQueryParamTagMatchStrategy `queryParam:"style=form,explode=true,name=tag_match_strategy"`
	// Filter tickets assigned to this user id
	AssignedUser *string `queryParam:"style=form,explode=true,name=assigned_user"`
	// Filter tickets by state
	State *State `queryParam:"style=form,explode=true,name=state"`
}

func (o *ListTicketsRequest) GetPage() *int {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *ListTicketsRequest) GetPerPage() *int {
	if o == nil {
		return nil
	}
	return o.PerPage
}

func (o *ListTicketsRequest) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ListTicketsRequest) GetTagMatchStrategy() *ListTicketsQueryParamTagMatchStrategy {
	if o == nil {
		return nil
	}
	return o.TagMatchStrategy
}

func (o *ListTicketsRequest) GetAssignedUser() *string {
	if o == nil {
		return nil
	}
	return o.AssignedUser
}

func (o *ListTicketsRequest) GetState() *State {
	if o == nil {
		return nil
	}
	return o.State
}

type ListTicketsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// List all of the tickets that have been added to the organiation
	TicketingTicketEntity *shared.TicketingTicketEntity
	// A collection of codes that generally means the end user got something wrong in making the request
	BadRequest *shared.BadRequest
	// A collection of codes that generally means the client was not authenticated correctly for the request they want to make
	Unauthorized *shared.Unauthorized
	// Status codes relating to the resource/entity they are requesting not being found or endpoints/routes not existing
	NotFound *shared.NotFound
	// Status codes relating to the client being rate limited by the server
	RateLimited *shared.RateLimited
	// A collection of status codes that generally mean the server failed in an unexpected way
	InternalServerError *shared.InternalServerError
	// Timeouts occurred with the request
	Timeout *shared.Timeout
}

func (o *ListTicketsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListTicketsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListTicketsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListTicketsResponse) GetTicketingTicketEntity() *shared.TicketingTicketEntity {
	if o == nil {
		return nil
	}
	return o.TicketingTicketEntity
}

func (o *ListTicketsResponse) GetBadRequest() *shared.BadRequest {
	if o == nil {
		return nil
	}
	return o.BadRequest
}

func (o *ListTicketsResponse) GetUnauthorized() *shared.Unauthorized {
	if o == nil {
		return nil
	}
	return o.Unauthorized
}

func (o *ListTicketsResponse) GetNotFound() *shared.NotFound {
	if o == nil {
		return nil
	}
	return o.NotFound
}

func (o *ListTicketsResponse) GetRateLimited() *shared.RateLimited {
	if o == nil {
		return nil
	}
	return o.RateLimited
}

func (o *ListTicketsResponse) GetInternalServerError() *shared.InternalServerError {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *ListTicketsResponse) GetTimeout() *shared.Timeout {
	if o == nil {
		return nil
	}
	return o.Timeout
}
