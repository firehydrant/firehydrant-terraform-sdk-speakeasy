// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/types"
	"net/http"
)

type QueryParamSortField string

const (
	QueryParamSortFieldUserCount     QueryParamSortField = "user_count"
	QueryParamSortFieldIncidentCount QueryParamSortField = "incident_count"
	QueryParamSortFieldTimeSpent     QueryParamSortField = "time_spent"
)

func (e QueryParamSortField) ToPointer() *QueryParamSortField {
	return &e
}
func (e *QueryParamSortField) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_count":
		fallthrough
	case "incident_count":
		fallthrough
	case "time_spent":
		*e = QueryParamSortField(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSortField: %v", v)
	}
}

type QueryParamSortDirection string

const (
	QueryParamSortDirectionAsc  QueryParamSortDirection = "asc"
	QueryParamSortDirectionDesc QueryParamSortDirection = "desc"
)

func (e QueryParamSortDirection) ToPointer() *QueryParamSortDirection {
	return &e
}
func (e *QueryParamSortDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = QueryParamSortDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamSortDirection: %v", v)
	}
}

type ListUserInvolvementMetricsRequest struct {
	// The start date to return metrics from
	StartDate *types.Date `queryParam:"style=form,explode=true,name=start_date"`
	// The end date to return metrics from
	EndDate       *types.Date              `queryParam:"style=form,explode=true,name=end_date"`
	BucketSize    *string                  `queryParam:"style=form,explode=true,name=bucket_size"`
	By            *string                  `queryParam:"style=form,explode=true,name=by"`
	SortField     *QueryParamSortField     `queryParam:"style=form,explode=true,name=sort_field"`
	SortDirection *QueryParamSortDirection `queryParam:"style=form,explode=true,name=sort_direction"`
	SortLimit     *int                     `queryParam:"style=form,explode=true,name=sort_limit"`
}

func (l ListUserInvolvementMetricsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListUserInvolvementMetricsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListUserInvolvementMetricsRequest) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ListUserInvolvementMetricsRequest) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ListUserInvolvementMetricsRequest) GetBucketSize() *string {
	if o == nil {
		return nil
	}
	return o.BucketSize
}

func (o *ListUserInvolvementMetricsRequest) GetBy() *string {
	if o == nil {
		return nil
	}
	return o.By
}

func (o *ListUserInvolvementMetricsRequest) GetSortField() *QueryParamSortField {
	if o == nil {
		return nil
	}
	return o.SortField
}

func (o *ListUserInvolvementMetricsRequest) GetSortDirection() *QueryParamSortDirection {
	if o == nil {
		return nil
	}
	return o.SortDirection
}

func (o *ListUserInvolvementMetricsRequest) GetSortLimit() *int {
	if o == nil {
		return nil
	}
	return o.SortLimit
}

type ListUserInvolvementMetricsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Returns a report with time bucketed analytics data
	MetricsMetricsEntity *shared.MetricsMetricsEntity
	// A collection of codes that generally means the end user got something wrong in making the request
	BadRequest *shared.BadRequest
	// A collection of codes that generally means the client was not authenticated correctly for the request they want to make
	Unauthorized *shared.Unauthorized
	// Status codes relating to the resource/entity they are requesting not being found or endpoints/routes not existing
	NotFound *shared.NotFound
	// Status codes relating to the client being rate limited by the server
	RateLimited *shared.RateLimited
	// A collection of status codes that generally mean the server failed in an unexpected way
	InternalServerError *shared.InternalServerError
	// Timeouts occurred with the request
	Timeout *shared.Timeout
}

func (o *ListUserInvolvementMetricsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListUserInvolvementMetricsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListUserInvolvementMetricsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListUserInvolvementMetricsResponse) GetMetricsMetricsEntity() *shared.MetricsMetricsEntity {
	if o == nil {
		return nil
	}
	return o.MetricsMetricsEntity
}

func (o *ListUserInvolvementMetricsResponse) GetBadRequest() *shared.BadRequest {
	if o == nil {
		return nil
	}
	return o.BadRequest
}

func (o *ListUserInvolvementMetricsResponse) GetUnauthorized() *shared.Unauthorized {
	if o == nil {
		return nil
	}
	return o.Unauthorized
}

func (o *ListUserInvolvementMetricsResponse) GetNotFound() *shared.NotFound {
	if o == nil {
		return nil
	}
	return o.NotFound
}

func (o *ListUserInvolvementMetricsResponse) GetRateLimited() *shared.RateLimited {
	if o == nil {
		return nil
	}
	return o.RateLimited
}

func (o *ListUserInvolvementMetricsResponse) GetInternalServerError() *shared.InternalServerError {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *ListUserInvolvementMetricsResponse) GetTimeout() *shared.Timeout {
	if o == nil {
		return nil
	}
	return o.Timeout
}
