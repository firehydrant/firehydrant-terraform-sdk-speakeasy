// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"net/http"
)

type SetIncidentAlertAsPrimaryRequest struct {
	IncidentAlertID                                        string                                                        `pathParam:"style=simple,explode=false,name=incident_alert_id"`
	IncidentID                                             string                                                        `pathParam:"style=simple,explode=false,name=incident_id"`
	PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary shared.PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary `request:"mediaType=application/json"`
}

func (o *SetIncidentAlertAsPrimaryRequest) GetIncidentAlertID() string {
	if o == nil {
		return ""
	}
	return o.IncidentAlertID
}

func (o *SetIncidentAlertAsPrimaryRequest) GetIncidentID() string {
	if o == nil {
		return ""
	}
	return o.IncidentID
}

func (o *SetIncidentAlertAsPrimaryRequest) GetPatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary() shared.PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary {
	if o == nil {
		return shared.PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary{}
	}
	return o.PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary
}

type SetIncidentAlertAsPrimaryResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident.
	IncidentsAlertEntity *shared.IncidentsAlertEntity
	// A collection of codes that generally means the end user got something wrong in making the request
	BadRequest *shared.BadRequest
	// A collection of codes that generally means the client was not authenticated correctly for the request they want to make
	Unauthorized *shared.Unauthorized
	// Status codes relating to the resource/entity they are requesting not being found or endpoints/routes not existing
	NotFound *shared.NotFound
	// Status codes relating to the client being rate limited by the server
	RateLimited *shared.RateLimited
	// A collection of status codes that generally mean the server failed in an unexpected way
	InternalServerError *shared.InternalServerError
	// Timeouts occurred with the request
	Timeout *shared.Timeout
}

func (o *SetIncidentAlertAsPrimaryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *SetIncidentAlertAsPrimaryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *SetIncidentAlertAsPrimaryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *SetIncidentAlertAsPrimaryResponse) GetIncidentsAlertEntity() *shared.IncidentsAlertEntity {
	if o == nil {
		return nil
	}
	return o.IncidentsAlertEntity
}

func (o *SetIncidentAlertAsPrimaryResponse) GetBadRequest() *shared.BadRequest {
	if o == nil {
		return nil
	}
	return o.BadRequest
}

func (o *SetIncidentAlertAsPrimaryResponse) GetUnauthorized() *shared.Unauthorized {
	if o == nil {
		return nil
	}
	return o.Unauthorized
}

func (o *SetIncidentAlertAsPrimaryResponse) GetNotFound() *shared.NotFound {
	if o == nil {
		return nil
	}
	return o.NotFound
}

func (o *SetIncidentAlertAsPrimaryResponse) GetRateLimited() *shared.RateLimited {
	if o == nil {
		return nil
	}
	return o.RateLimited
}

func (o *SetIncidentAlertAsPrimaryResponse) GetInternalServerError() *shared.InternalServerError {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *SetIncidentAlertAsPrimaryResponse) GetTimeout() *shared.Timeout {
	if o == nil {
		return nil
	}
	return o.Timeout
}
