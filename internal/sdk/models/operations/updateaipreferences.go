// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"net/http"
)

type UpdateAiPreferencesRequestBody struct {
	// Whether to enable AI features
	Ai *bool `json:"ai,omitempty"`
	// Whether to enable incident summaries
	Summaries *bool `json:"summaries,omitempty"`
	// Whether to enable incident descriptions
	Description *bool `json:"description,omitempty"`
	// Whether to enable incident impact
	Impact *bool `json:"impact,omitempty"`
	// Whether to enable incident updates
	Updates *bool `json:"updates,omitempty"`
	// Whether to enable incident retrospectives
	Retros *bool `json:"retros,omitempty"`
	// Whether to enable incident followups
	Followups *bool `json:"followups,omitempty"`
	// Whether to enable similar incidents
	SimilarIncidents *bool `json:"similar_incidents,omitempty"`
}

func (o *UpdateAiPreferencesRequestBody) GetAi() *bool {
	if o == nil {
		return nil
	}
	return o.Ai
}

func (o *UpdateAiPreferencesRequestBody) GetSummaries() *bool {
	if o == nil {
		return nil
	}
	return o.Summaries
}

func (o *UpdateAiPreferencesRequestBody) GetDescription() *bool {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateAiPreferencesRequestBody) GetImpact() *bool {
	if o == nil {
		return nil
	}
	return o.Impact
}

func (o *UpdateAiPreferencesRequestBody) GetUpdates() *bool {
	if o == nil {
		return nil
	}
	return o.Updates
}

func (o *UpdateAiPreferencesRequestBody) GetRetros() *bool {
	if o == nil {
		return nil
	}
	return o.Retros
}

func (o *UpdateAiPreferencesRequestBody) GetFollowups() *bool {
	if o == nil {
		return nil
	}
	return o.Followups
}

func (o *UpdateAiPreferencesRequestBody) GetSimilarIncidents() *bool {
	if o == nil {
		return nil
	}
	return o.SimilarIncidents
}

type UpdateAiPreferencesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Updates the AI preferences
	AIEntitiesPreferencesEntity *shared.AIEntitiesPreferencesEntity
	// A collection of codes that generally means the end user got something wrong in making the request
	BadRequest *shared.BadRequest
	// A collection of codes that generally means the client was not authenticated correctly for the request they want to make
	Unauthorized *shared.Unauthorized
	// Status codes relating to the resource/entity they are requesting not being found or endpoints/routes not existing
	NotFound *shared.NotFound
	// Status codes relating to the client being rate limited by the server
	RateLimited *shared.RateLimited
	// A collection of status codes that generally mean the server failed in an unexpected way
	InternalServerError *shared.InternalServerError
	// Timeouts occurred with the request
	Timeout *shared.Timeout
}

func (o *UpdateAiPreferencesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateAiPreferencesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateAiPreferencesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateAiPreferencesResponse) GetAIEntitiesPreferencesEntity() *shared.AIEntitiesPreferencesEntity {
	if o == nil {
		return nil
	}
	return o.AIEntitiesPreferencesEntity
}

func (o *UpdateAiPreferencesResponse) GetBadRequest() *shared.BadRequest {
	if o == nil {
		return nil
	}
	return o.BadRequest
}

func (o *UpdateAiPreferencesResponse) GetUnauthorized() *shared.Unauthorized {
	if o == nil {
		return nil
	}
	return o.Unauthorized
}

func (o *UpdateAiPreferencesResponse) GetNotFound() *shared.NotFound {
	if o == nil {
		return nil
	}
	return o.NotFound
}

func (o *UpdateAiPreferencesResponse) GetRateLimited() *shared.RateLimited {
	if o == nil {
		return nil
	}
	return o.RateLimited
}

func (o *UpdateAiPreferencesResponse) GetInternalServerError() *shared.InternalServerError {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *UpdateAiPreferencesResponse) GetTimeout() *shared.Timeout {
	if o == nil {
		return nil
	}
	return o.Timeout
}
