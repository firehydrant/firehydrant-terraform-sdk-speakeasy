// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"net/http"
)

type UpdateLifecycleMilestoneRequestBody struct {
	// The name of the milestone
	Name *string `json:"name,omitempty"`
	// A long-form description of the milestone's purpose
	Description *string `json:"description,omitempty"`
	// A unique identifier for the milestone. If not provided, one will be generated from the name.
	Slug *string `json:"slug,omitempty"`
	// The position of the milestone within the phase. If not provided, the milestone will be added as the last milestone in the phase.
	Position *int `json:"position,omitempty"`
	// The ID of a later milestone that cannot be started until this milestone has a timestamp populated
	RequiredAtMilestoneID *string `json:"required_at_milestone_id,omitempty"`
}

func (o *UpdateLifecycleMilestoneRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateLifecycleMilestoneRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateLifecycleMilestoneRequestBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateLifecycleMilestoneRequestBody) GetPosition() *int {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *UpdateLifecycleMilestoneRequestBody) GetRequiredAtMilestoneID() *string {
	if o == nil {
		return nil
	}
	return o.RequiredAtMilestoneID
}

type UpdateLifecycleMilestoneRequest struct {
	MilestoneID string                               `pathParam:"style=simple,explode=false,name=milestone_id"`
	RequestBody *UpdateLifecycleMilestoneRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateLifecycleMilestoneRequest) GetMilestoneID() string {
	if o == nil {
		return ""
	}
	return o.MilestoneID
}

func (o *UpdateLifecycleMilestoneRequest) GetRequestBody() *UpdateLifecycleMilestoneRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateLifecycleMilestoneResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Update a milestone
	LifecyclesPhaseEntity *shared.LifecyclesPhaseEntity
	// A collection of codes that generally means the end user got something wrong in making the request
	BadRequest *shared.BadRequest
	// A collection of codes that generally means the client was not authenticated correctly for the request they want to make
	Unauthorized *shared.Unauthorized
	// Status codes relating to the resource/entity they are requesting not being found or endpoints/routes not existing
	NotFound *shared.NotFound
	// Status codes relating to the client being rate limited by the server
	RateLimited *shared.RateLimited
	// A collection of status codes that generally mean the server failed in an unexpected way
	InternalServerError *shared.InternalServerError
	// Timeouts occurred with the request
	Timeout *shared.Timeout
}

func (o *UpdateLifecycleMilestoneResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateLifecycleMilestoneResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateLifecycleMilestoneResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *UpdateLifecycleMilestoneResponse) GetLifecyclesPhaseEntity() *shared.LifecyclesPhaseEntity {
	if o == nil {
		return nil
	}
	return o.LifecyclesPhaseEntity
}

func (o *UpdateLifecycleMilestoneResponse) GetBadRequest() *shared.BadRequest {
	if o == nil {
		return nil
	}
	return o.BadRequest
}

func (o *UpdateLifecycleMilestoneResponse) GetUnauthorized() *shared.Unauthorized {
	if o == nil {
		return nil
	}
	return o.Unauthorized
}

func (o *UpdateLifecycleMilestoneResponse) GetNotFound() *shared.NotFound {
	if o == nil {
		return nil
	}
	return o.NotFound
}

func (o *UpdateLifecycleMilestoneResponse) GetRateLimited() *shared.RateLimited {
	if o == nil {
		return nil
	}
	return o.RateLimited
}

func (o *UpdateLifecycleMilestoneResponse) GetInternalServerError() *shared.InternalServerError {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *UpdateLifecycleMilestoneResponse) GetTimeout() *shared.Timeout {
	if o == nil {
		return nil
	}
	return o.Timeout
}
