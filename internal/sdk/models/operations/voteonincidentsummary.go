// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"net/http"
)

type Direction string

const (
	DirectionUp   Direction = "up"
	DirectionDown Direction = "down"
)

func (e Direction) ToPointer() *Direction {
	return &e
}
func (e *Direction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "up":
		fallthrough
	case "down":
		*e = Direction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Direction: %v", v)
	}
}

type VoteOnIncidentSummaryRequestBody struct {
	Direction Direction `json:"direction"`
}

func (o *VoteOnIncidentSummaryRequestBody) GetDirection() Direction {
	if o == nil {
		return Direction("")
	}
	return o.Direction
}

type VoteOnIncidentSummaryRequest struct {
	IncidentID         string                           `pathParam:"style=simple,explode=false,name=incident_id"`
	GeneratedSummaryID string                           `pathParam:"style=simple,explode=false,name=generated_summary_id"`
	RequestBody        VoteOnIncidentSummaryRequestBody `request:"mediaType=application/json"`
}

func (o *VoteOnIncidentSummaryRequest) GetIncidentID() string {
	if o == nil {
		return ""
	}
	return o.IncidentID
}

func (o *VoteOnIncidentSummaryRequest) GetGeneratedSummaryID() string {
	if o == nil {
		return ""
	}
	return o.GeneratedSummaryID
}

func (o *VoteOnIncidentSummaryRequest) GetRequestBody() VoteOnIncidentSummaryRequestBody {
	if o == nil {
		return VoteOnIncidentSummaryRequestBody{}
	}
	return o.RequestBody
}

type VoteOnIncidentSummaryResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// A collection of codes that generally means the end user got something wrong in making the request
	BadRequest *shared.BadRequest
	// A collection of codes that generally means the client was not authenticated correctly for the request they want to make
	Unauthorized *shared.Unauthorized
	// Status codes relating to the resource/entity they are requesting not being found or endpoints/routes not existing
	NotFound *shared.NotFound
	// Status codes relating to the client being rate limited by the server
	RateLimited *shared.RateLimited
	// A collection of status codes that generally mean the server failed in an unexpected way
	InternalServerError *shared.InternalServerError
	// Timeouts occurred with the request
	Timeout *shared.Timeout
}

func (o *VoteOnIncidentSummaryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *VoteOnIncidentSummaryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *VoteOnIncidentSummaryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *VoteOnIncidentSummaryResponse) GetBadRequest() *shared.BadRequest {
	if o == nil {
		return nil
	}
	return o.BadRequest
}

func (o *VoteOnIncidentSummaryResponse) GetUnauthorized() *shared.Unauthorized {
	if o == nil {
		return nil
	}
	return o.Unauthorized
}

func (o *VoteOnIncidentSummaryResponse) GetNotFound() *shared.NotFound {
	if o == nil {
		return nil
	}
	return o.NotFound
}

func (o *VoteOnIncidentSummaryResponse) GetRateLimited() *shared.RateLimited {
	if o == nil {
		return nil
	}
	return o.RateLimited
}

func (o *VoteOnIncidentSummaryResponse) GetInternalServerError() *shared.InternalServerError {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *VoteOnIncidentSummaryResponse) GetTimeout() *shared.Timeout {
	if o == nil {
		return nil
	}
	return o.Timeout
}
