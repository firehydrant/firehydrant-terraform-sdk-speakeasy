// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ActorEntityType string

const (
	ActorEntityTypeFirehydrantUser  ActorEntityType = "firehydrant_user"
	ActorEntityTypeFirehydrantBot   ActorEntityType = "firehydrant_bot"
	ActorEntityTypeAlertmanager     ActorEntityType = "alertmanager"
	ActorEntityTypeAsana            ActorEntityType = "asana"
	ActorEntityTypeAws              ActorEntityType = "aws"
	ActorEntityTypeBugsnag          ActorEntityType = "bugsnag"
	ActorEntityTypeCheckly          ActorEntityType = "checkly"
	ActorEntityTypeCustomAlerts     ActorEntityType = "custom_alerts"
	ActorEntityTypeDatadog          ActorEntityType = "datadog"
	ActorEntityTypeShortcut         ActorEntityType = "shortcut"
	ActorEntityTypeNewRelic         ActorEntityType = "new_relic"
	ActorEntityTypeNunc             ActorEntityType = "nunc"
	ActorEntityTypeGithub           ActorEntityType = "github"
	ActorEntityTypeGiphy            ActorEntityType = "giphy"
	ActorEntityTypeGoogleMeet       ActorEntityType = "google_meet"
	ActorEntityTypeGoogleCalendar   ActorEntityType = "google_calendar"
	ActorEntityTypeMicrosoftTeams   ActorEntityType = "microsoft_teams"
	ActorEntityTypeMicrosoftTeamsV2 ActorEntityType = "microsoft_teams_v2"
	ActorEntityTypeWebex            ActorEntityType = "webex"
	ActorEntityTypeJiraCloud        ActorEntityType = "jira_cloud"
	ActorEntityTypeJiraOnprem       ActorEntityType = "jira_onprem"
	ActorEntityTypeOpsgenie         ActorEntityType = "opsgenie"
	ActorEntityTypePagerDuty        ActorEntityType = "pager_duty"
	ActorEntityTypeHoneycomb        ActorEntityType = "honeycomb"
	ActorEntityTypePatchy           ActorEntityType = "patchy"
	ActorEntityTypeServiceNow       ActorEntityType = "service_now"
	ActorEntityTypeSignals          ActorEntityType = "signals"
	ActorEntityTypeSlack            ActorEntityType = "slack"
	ActorEntityTypeStatuspage       ActorEntityType = "statuspage"
	ActorEntityTypeVictorops        ActorEntityType = "victorops"
	ActorEntityTypeZendesk          ActorEntityType = "zendesk"
	ActorEntityTypeZoom             ActorEntityType = "zoom"
	ActorEntityTypeConfluenceCloud  ActorEntityType = "confluence_cloud"
	ActorEntityTypeGoogleDocs       ActorEntityType = "google_docs"
	ActorEntityTypeZoomV2           ActorEntityType = "zoom_v2"
	ActorEntityTypeLinear           ActorEntityType = "linear"
	ActorEntityTypeCortex           ActorEntityType = "cortex"
)

func (e ActorEntityType) ToPointer() *ActorEntityType {
	return &e
}
func (e *ActorEntityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "firehydrant_user":
		fallthrough
	case "firehydrant_bot":
		fallthrough
	case "alertmanager":
		fallthrough
	case "asana":
		fallthrough
	case "aws":
		fallthrough
	case "bugsnag":
		fallthrough
	case "checkly":
		fallthrough
	case "custom_alerts":
		fallthrough
	case "datadog":
		fallthrough
	case "shortcut":
		fallthrough
	case "new_relic":
		fallthrough
	case "nunc":
		fallthrough
	case "github":
		fallthrough
	case "giphy":
		fallthrough
	case "google_meet":
		fallthrough
	case "google_calendar":
		fallthrough
	case "microsoft_teams":
		fallthrough
	case "microsoft_teams_v2":
		fallthrough
	case "webex":
		fallthrough
	case "jira_cloud":
		fallthrough
	case "jira_onprem":
		fallthrough
	case "opsgenie":
		fallthrough
	case "pager_duty":
		fallthrough
	case "honeycomb":
		fallthrough
	case "patchy":
		fallthrough
	case "service_now":
		fallthrough
	case "signals":
		fallthrough
	case "slack":
		fallthrough
	case "statuspage":
		fallthrough
	case "victorops":
		fallthrough
	case "zendesk":
		fallthrough
	case "zoom":
		fallthrough
	case "confluence_cloud":
		fallthrough
	case "google_docs":
		fallthrough
	case "zoom_v2":
		fallthrough
	case "linear":
		fallthrough
	case "cortex":
		*e = ActorEntityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActorEntityType: %v", v)
	}
}

type ActorEntity struct {
	ID    *string          `json:"id,omitempty"`
	Name  *string          `json:"name,omitempty"`
	Email *string          `json:"email,omitempty"`
	Type  *ActorEntityType `json:"type,omitempty"`
}

func (o *ActorEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ActorEntity) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ActorEntity) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *ActorEntity) GetType() *ActorEntityType {
	if o == nil {
		return nil
	}
	return o.Type
}
