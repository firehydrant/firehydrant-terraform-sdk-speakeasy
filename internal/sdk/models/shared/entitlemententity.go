// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Tier string

const (
	TierFree        Tier = "free"
	TierEssentials  Tier = "essentials"
	TierEnterprise  Tier = "enterprise"
	TierSignalsOnly Tier = "signals_only"
)

func (e Tier) ToPointer() *Tier {
	return &e
}
func (e *Tier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "free":
		fallthrough
	case "essentials":
		fallthrough
	case "enterprise":
		fallthrough
	case "signals_only":
		*e = Tier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tier: %v", v)
	}
}

type EntitlementEntity struct {
	CurrentCount *int     `json:"current_count,omitempty"`
	Errors       []string `json:"errors,omitempty"`
	Exists       *bool    `json:"exists,omitempty"`
	Available    *bool    `json:"available,omitempty"`
	Maximum      *int     `json:"maximum,omitempty"`
	Name         *string  `json:"name,omitempty"`
	Slug         *string  `json:"slug,omitempty"`
	Tier         *Tier    `json:"tier,omitempty"`
}

func (o *EntitlementEntity) GetCurrentCount() *int {
	if o == nil {
		return nil
	}
	return o.CurrentCount
}

func (o *EntitlementEntity) GetErrors() []string {
	if o == nil {
		return nil
	}
	return o.Errors
}

func (o *EntitlementEntity) GetExists() *bool {
	if o == nil {
		return nil
	}
	return o.Exists
}

func (o *EntitlementEntity) GetAvailable() *bool {
	if o == nil {
		return nil
	}
	return o.Available
}

func (o *EntitlementEntity) GetMaximum() *int {
	if o == nil {
		return nil
	}
	return o.Maximum
}

func (o *EntitlementEntity) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EntitlementEntity) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *EntitlementEntity) GetTier() *Tier {
	if o == nil {
		return nil
	}
	return o.Tier
}
