// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type IncidentsImpactEntityType string

const (
	IncidentsImpactEntityTypeEnvironment   IncidentsImpactEntityType = "environment"
	IncidentsImpactEntityTypeFunctionality IncidentsImpactEntityType = "functionality"
	IncidentsImpactEntityTypeService       IncidentsImpactEntityType = "service"
)

func (e IncidentsImpactEntityType) ToPointer() *IncidentsImpactEntityType {
	return &e
}
func (e *IncidentsImpactEntityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environment":
		fallthrough
	case "functionality":
		fallthrough
	case "service":
		*e = IncidentsImpactEntityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IncidentsImpactEntityType: %v", v)
	}
}

type IncidentsImpactEntity struct {
	ID     *string                    `json:"id,omitempty"`
	Type   *IncidentsImpactEntityType `json:"type,omitempty"`
	Impact *SuccinctEntity            `json:"impact,omitempty"`
	// SeverityMatrix_ConditionEntity model
	Condition     *SeverityMatrixConditionEntity      `json:"condition,omitempty"`
	Conversations []ConversationsAPIEntitiesReference `json:"conversations,omitempty"`
}

func (o *IncidentsImpactEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IncidentsImpactEntity) GetType() *IncidentsImpactEntityType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *IncidentsImpactEntity) GetImpact() *SuccinctEntity {
	if o == nil {
		return nil
	}
	return o.Impact
}

func (o *IncidentsImpactEntity) GetCondition() *SeverityMatrixConditionEntity {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *IncidentsImpactEntity) GetConversations() []ConversationsAPIEntitiesReference {
	if o == nil {
		return nil
	}
	return o.Conversations
}
