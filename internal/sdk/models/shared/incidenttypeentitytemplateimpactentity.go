// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Type string

const (
	TypeEnvironment   Type = "environment"
	TypeFunctionality Type = "functionality"
	TypeService       Type = "service"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environment":
		fallthrough
	case "functionality":
		fallthrough
	case "service":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type IncidentTypeEntityTemplateImpactEntity struct {
	ID            *string `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	ConditionID   *string `json:"condition_id,omitempty"`
	ConditionName *string `json:"condition_name,omitempty"`
	Type          *Type   `json:"type,omitempty"`
}

func (o *IncidentTypeEntityTemplateImpactEntity) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IncidentTypeEntityTemplateImpactEntity) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *IncidentTypeEntityTemplateImpactEntity) GetConditionID() *string {
	if o == nil {
		return nil
	}
	return o.ConditionID
}

func (o *IncidentTypeEntityTemplateImpactEntity) GetConditionName() *string {
	if o == nil {
		return nil
	}
	return o.ConditionName
}

func (o *IncidentTypeEntityTemplateImpactEntity) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}
