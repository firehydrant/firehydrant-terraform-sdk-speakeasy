// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType string

const (
	PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDTypeCaused    PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType = "caused"
	PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDTypeFixed     PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType = "fixed"
	PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDTypeSuspect   PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType = "suspect"
	PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDTypeDismissed PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType = "dismissed"
)

func (e PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType) ToPointer() *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType {
	return &e
}
func (e *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "caused":
		fallthrough
	case "fixed":
		fallthrough
	case "suspect":
		fallthrough
	case "dismissed":
		*e = PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType: %v", v)
	}
}

// PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventID - Update a change attached to an incident
type PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventID struct {
	Type *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType `json:"type,omitempty"`
	// A short description about why this change event is related
	Why *string `json:"why,omitempty"`
}

func (o *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventID) GetType() *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *PatchV1IncidentsIncidentIDRelatedChangeEventsRelatedChangeEventID) GetWhy() *string {
	if o == nil {
		return nil
	}
	return o.Why
}
