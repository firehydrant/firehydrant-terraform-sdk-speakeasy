// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Severities struct {
	// FireHydrant severity slug
	SeveritySlug string `json:"severity_slug"`
	// Statuspage.io severity name
	RemoteStatus string `json:"remote_status"`
}

func (o *Severities) GetSeveritySlug() string {
	if o == nil {
		return ""
	}
	return o.SeveritySlug
}

func (o *Severities) GetRemoteStatus() string {
	if o == nil {
		return ""
	}
	return o.RemoteStatus
}

type Conditions struct {
	// FireHydrant condition id
	ConditionID string `json:"condition_id"`
	// Statuspage.io condition name
	StatuspageioCondition string `json:"statuspageio_condition"`
}

func (o *Conditions) GetConditionID() string {
	if o == nil {
		return ""
	}
	return o.ConditionID
}

func (o *Conditions) GetStatuspageioCondition() string {
	if o == nil {
		return ""
	}
	return o.StatuspageioCondition
}

// PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus - Statuspage.io status
type PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus string

const (
	PatchV1IntegrationsStatuspageConnectionsConnectionIDStatusInvestigating PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus = "investigating"
	PatchV1IntegrationsStatuspageConnectionsConnectionIDStatusIdentified    PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus = "identified"
	PatchV1IntegrationsStatuspageConnectionsConnectionIDStatusMonitoring    PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus = "monitoring"
	PatchV1IntegrationsStatuspageConnectionsConnectionIDStatusResolved      PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus = "resolved"
)

func (e PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus) ToPointer() *PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus {
	return &e
}
func (e *PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "investigating":
		fallthrough
	case "identified":
		fallthrough
	case "monitoring":
		fallthrough
	case "resolved":
		*e = PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus: %v", v)
	}
}

type MilestoneMappings struct {
	// FireHydrant milestone id
	MilestoneID string `json:"milestone_id"`
	// Statuspage.io status
	Status PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus `json:"status"`
}

func (o *MilestoneMappings) GetMilestoneID() string {
	if o == nil {
		return ""
	}
	return o.MilestoneID
}

func (o *MilestoneMappings) GetStatus() PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus {
	if o == nil {
		return PatchV1IntegrationsStatuspageConnectionsConnectionIDStatus("")
	}
	return o.Status
}

// PatchV1IntegrationsStatuspageConnectionsConnectionID - Update the given Statuspage integration connection.
type PatchV1IntegrationsStatuspageConnectionsConnectionID struct {
	PageID            *string             `json:"page_id,omitempty"`
	Severities        []Severities        `json:"severities,omitempty"`
	Conditions        []Conditions        `json:"conditions,omitempty"`
	MilestoneMappings []MilestoneMappings `json:"milestone_mappings,omitempty"`
}

func (o *PatchV1IntegrationsStatuspageConnectionsConnectionID) GetPageID() *string {
	if o == nil {
		return nil
	}
	return o.PageID
}

func (o *PatchV1IntegrationsStatuspageConnectionsConnectionID) GetSeverities() []Severities {
	if o == nil {
		return nil
	}
	return o.Severities
}

func (o *PatchV1IntegrationsStatuspageConnectionsConnectionID) GetConditions() []Conditions {
	if o == nil {
		return nil
	}
	return o.Conditions
}

func (o *PatchV1IntegrationsStatuspageConnectionsConnectionID) GetMilestoneMappings() []MilestoneMappings {
	if o == nil {
		return nil
	}
	return o.MilestoneMappings
}
