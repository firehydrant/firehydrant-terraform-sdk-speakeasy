// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Checklists struct {
	ID string `json:"id"`
	// Set to `true` to remove checklist from service
	Remove *bool `json:"remove,omitempty"`
}

func (o *Checklists) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Checklists) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

type PatchV1ServicesServiceIDExternalResources struct {
	RemoteID string `json:"remote_id"`
	// The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, victorops. Not required if the resource has already been imported.
	ConnectionType *string `json:"connection_type,omitempty"`
	// If you are trying to remove an external resource from a service, set this to 'true'.
	Remove *bool `json:"remove,omitempty"`
}

func (o *PatchV1ServicesServiceIDExternalResources) GetRemoteID() string {
	if o == nil {
		return ""
	}
	return o.RemoteID
}

func (o *PatchV1ServicesServiceIDExternalResources) GetConnectionType() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionType
}

func (o *PatchV1ServicesServiceIDExternalResources) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

type PatchV1ServicesServiceIDFunctionalities struct {
	// If you are trying to reuse a functionality, you may set the ID to attach it to the service
	ID *string `json:"id,omitempty"`
	// If you are trying to remove a functionality from a service, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
	// If you are trying to create a new functionality and attach it to this service, set the summary key
	Summary *string `json:"summary,omitempty"`
}

func (o *PatchV1ServicesServiceIDFunctionalities) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PatchV1ServicesServiceIDFunctionalities) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *PatchV1ServicesServiceIDFunctionalities) GetSummary() *string {
	if o == nil {
		return nil
	}
	return o.Summary
}

type PatchV1ServicesServiceIDLinks struct {
	// URL
	HrefURL string `json:"href_url"`
	// Short name used to display and identify this link
	Name string `json:"name"`
	// An optional URL to an icon representing this link
	IconURL *string `json:"icon_url,omitempty"`
	// If you are trying to remove a link, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
	// If updating an existing link, specify it's id.
	ID *string `json:"id,omitempty"`
}

func (o *PatchV1ServicesServiceIDLinks) GetHrefURL() string {
	if o == nil {
		return ""
	}
	return o.HrefURL
}

func (o *PatchV1ServicesServiceIDLinks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PatchV1ServicesServiceIDLinks) GetIconURL() *string {
	if o == nil {
		return nil
	}
	return o.IconURL
}

func (o *PatchV1ServicesServiceIDLinks) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *PatchV1ServicesServiceIDLinks) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// PatchV1ServicesServiceIDOwner - An object representing a Team that owns the service
type PatchV1ServicesServiceIDOwner struct {
	ID string `json:"id"`
}

func (o *PatchV1ServicesServiceIDOwner) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// PatchV1ServicesServiceIDServiceTier - Integer representing service tier
type PatchV1ServicesServiceIDServiceTier int

const (
	PatchV1ServicesServiceIDServiceTierZero  PatchV1ServicesServiceIDServiceTier = 0
	PatchV1ServicesServiceIDServiceTierOne   PatchV1ServicesServiceIDServiceTier = 1
	PatchV1ServicesServiceIDServiceTierTwo   PatchV1ServicesServiceIDServiceTier = 2
	PatchV1ServicesServiceIDServiceTierThree PatchV1ServicesServiceIDServiceTier = 3
	PatchV1ServicesServiceIDServiceTierFour  PatchV1ServicesServiceIDServiceTier = 4
	PatchV1ServicesServiceIDServiceTierFive  PatchV1ServicesServiceIDServiceTier = 5
)

func (e PatchV1ServicesServiceIDServiceTier) ToPointer() *PatchV1ServicesServiceIDServiceTier {
	return &e
}
func (e *PatchV1ServicesServiceIDServiceTier) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		*e = PatchV1ServicesServiceIDServiceTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1ServicesServiceIDServiceTier: %v", v)
	}
}

type PatchV1ServicesServiceIDTeams struct {
	ID string `json:"id"`
	// If you are trying to remove a team from a service, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
}

func (o *PatchV1ServicesServiceIDTeams) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PatchV1ServicesServiceIDTeams) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

// PatchV1ServicesServiceID - Update a services attributes, you may also add or remove functionalities from the service as well.
// Note: You may not remove or add individual label key/value pairs. You must include the entire object to override label values.
type PatchV1ServicesServiceID struct {
	AlertOnAdd            *bool `json:"alert_on_add,omitempty"`
	AutoAddRespondingTeam *bool `json:"auto_add_responding_team,omitempty"`
	// Array of checklist IDs to attach to the service
	Checklists  []Checklists `json:"checklists,omitempty"`
	Description *string      `json:"description,omitempty"`
	// An array of external resources to attach to this service.
	ExternalResources []PatchV1ServicesServiceIDExternalResources `json:"external_resources,omitempty"`
	// An array of functionalities
	Functionalities []PatchV1ServicesServiceIDFunctionalities `json:"functionalities,omitempty"`
	// A hash of label keys and values
	Labels map[string]string `json:"labels,omitempty"`
	// An array of links to associate with this service. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
	Links []PatchV1ServicesServiceIDLinks `json:"links,omitempty"`
	Name  *string                         `json:"name,omitempty"`
	// An object representing a Team that owns the service
	Owner *PatchV1ServicesServiceIDOwner `json:"owner,omitempty"`
	// If you are trying to remove a team as an owner from a service, set this to 'true'
	RemoveOwner *bool `json:"remove_owner,omitempty"`
	// If set to true, any checklists tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the checklists
	RemoveRemainingChecklists *bool `json:"remove_remaining_checklists,omitempty"`
	// If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
	RemoveRemainingExternalResources *bool `json:"remove_remaining_external_resources,omitempty"`
	// If set to true, any functionalities tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the functionalities
	RemoveRemainingFunctionalities *bool `json:"remove_remaining_functionalities,omitempty"`
	// If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
	RemoveRemainingTeams *bool `json:"remove_remaining_teams,omitempty"`
	// Integer representing service tier
	ServiceTier *PatchV1ServicesServiceIDServiceTier `json:"service_tier,omitempty"`
	// An array of teams to attach to this service.
	Teams []PatchV1ServicesServiceIDTeams `json:"teams,omitempty"`
}

func (o *PatchV1ServicesServiceID) GetAlertOnAdd() *bool {
	if o == nil {
		return nil
	}
	return o.AlertOnAdd
}

func (o *PatchV1ServicesServiceID) GetAutoAddRespondingTeam() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAddRespondingTeam
}

func (o *PatchV1ServicesServiceID) GetChecklists() []Checklists {
	if o == nil {
		return nil
	}
	return o.Checklists
}

func (o *PatchV1ServicesServiceID) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchV1ServicesServiceID) GetExternalResources() []PatchV1ServicesServiceIDExternalResources {
	if o == nil {
		return nil
	}
	return o.ExternalResources
}

func (o *PatchV1ServicesServiceID) GetFunctionalities() []PatchV1ServicesServiceIDFunctionalities {
	if o == nil {
		return nil
	}
	return o.Functionalities
}

func (o *PatchV1ServicesServiceID) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *PatchV1ServicesServiceID) GetLinks() []PatchV1ServicesServiceIDLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *PatchV1ServicesServiceID) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PatchV1ServicesServiceID) GetOwner() *PatchV1ServicesServiceIDOwner {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *PatchV1ServicesServiceID) GetRemoveOwner() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveOwner
}

func (o *PatchV1ServicesServiceID) GetRemoveRemainingChecklists() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingChecklists
}

func (o *PatchV1ServicesServiceID) GetRemoveRemainingExternalResources() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingExternalResources
}

func (o *PatchV1ServicesServiceID) GetRemoveRemainingFunctionalities() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingFunctionalities
}

func (o *PatchV1ServicesServiceID) GetRemoveRemainingTeams() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingTeams
}

func (o *PatchV1ServicesServiceID) GetServiceTier() *PatchV1ServicesServiceIDServiceTier {
	if o == nil {
		return nil
	}
	return o.ServiceTier
}

func (o *PatchV1ServicesServiceID) GetTeams() []PatchV1ServicesServiceIDTeams {
	if o == nil {
		return nil
	}
	return o.Teams
}
