// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDMembers struct {
	// The ID of a user who should be added to the schedule's rotation. You can add a user to the schedule
	// multiple times to construct more complex rotations, and you can specify a `null` user ID to create
	// unassigned slots in the rotation.
	//
	UserID *string `json:"user_id,omitempty"`
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDMembers) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType - The type of strategy. Must be one of "daily", "weekly", or "custom".
type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType string

const (
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDTypeDaily  PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType = "daily"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDTypeWeekly PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType = "weekly"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDTypeCustom PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType = "custom"
)

func (e PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType) ToPointer() *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType {
	return &e
}
func (e *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "custom":
		*e = PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType: %v", v)
	}
}

// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay - The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay string

const (
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDayMonday    PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay = "monday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDayTuesday   PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay = "tuesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDayWednesday PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay = "wednesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDayThursday  PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay = "thursday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDayFriday    PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay = "friday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDaySaturday  PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay = "saturday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDaySunday    PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay = "sunday"
)

func (e PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay) ToPointer() *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay {
	return &e
}
func (e *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay: %v", v)
	}
}

// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy - An object that specifies how the schedule's on-call shifts should be generated.
type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy struct {
	// The type of strategy. Must be one of "daily", "weekly", or "custom".
	Type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType `json:"type"`
	// An ISO8601 time string specifying when on-call shifts should hand off. This value is only used if the strategy type is "daily" or "weekly".
	HandoffTime *string `json:"handoff_time,omitempty"`
	// The day of the week on which on-call shifts should hand off, as its long-form name (e.g. "monday", "tuesday", etc). This value is only used if the strategy type is "weekly".
	HandoffDay *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay `json:"handoff_day,omitempty"`
	// An ISO8601 duration string specifying how long each shift should last. This value is only used if the strategy type is "custom".
	ShiftDuration *string `json:"shift_duration,omitempty"`
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) GetType() PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType {
	if o == nil {
		return PatchV1TeamsTeamIDOnCallSchedulesScheduleIDType("")
	}
	return o.Type
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) GetHandoffTime() *string {
	if o == nil {
		return nil
	}
	return o.HandoffTime
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) GetHandoffDay() *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDHandoffDay {
	if o == nil {
		return nil
	}
	return o.HandoffDay
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy) GetShiftDuration() *string {
	if o == nil {
		return nil
	}
	return o.ShiftDuration
}

// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay - The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay string

const (
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDayMonday    PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay = "monday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDayTuesday   PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay = "tuesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDayWednesday PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay = "wednesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDayThursday  PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay = "thursday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDayFriday    PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay = "friday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDaySaturday  PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay = "saturday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDaySunday    PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay = "sunday"
)

func (e PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay) ToPointer() *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay {
	return &e
}
func (e *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay: %v", v)
	}
}

// PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay - The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay string

const (
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDayMonday    PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay = "monday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDayTuesday   PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay = "tuesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDayWednesday PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay = "wednesday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDayThursday  PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay = "thursday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDayFriday    PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay = "friday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDaySaturday  PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay = "saturday"
	PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDaySunday    PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay = "sunday"
)

func (e PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay) ToPointer() *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay {
	return &e
}
func (e *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		fallthrough
	case "sunday":
		*e = PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay: %v", v)
	}
}

type PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictions struct {
	// The day of the week on which the restriction should start, as its long-form name (e.g. "monday", "tuesday", etc).
	StartDay PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay `json:"start_day"`
	// An ISO8601 time string specifying when the restriction should start.
	StartTime string `json:"start_time"`
	// The day of the week on which the restriction should end, as its long-form name (e.g. "monday", "tuesday", etc).
	EndDay PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay `json:"end_day"`
	// An ISO8601 time string specifying when the restriction should end.
	EndTime string `json:"end_time"`
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictions) GetStartDay() PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay {
	if o == nil {
		return PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStartDay("")
	}
	return o.StartDay
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictions) GetStartTime() string {
	if o == nil {
		return ""
	}
	return o.StartTime
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictions) GetEndDay() PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay {
	if o == nil {
		return PatchV1TeamsTeamIDOnCallSchedulesScheduleIDEndDay("")
	}
	return o.EndDay
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictions) GetEndTime() string {
	if o == nil {
		return ""
	}
	return o.EndTime
}

// PatchV1TeamsTeamIDOnCallSchedulesScheduleID - Update a Signals on-call schedule by ID
type PatchV1TeamsTeamIDOnCallSchedulesScheduleID struct {
	// The on-call schedule's name.
	Name *string `json:"name,omitempty"`
	// A detailed description of the on-call schedule.
	Description *string `json:"description,omitempty"`
	// The time zone in which the on-call schedule operates. This value must be a valid IANA time zone name.
	TimeZone *string `json:"time_zone,omitempty"`
	// The ID of a Slack user group for syncing purposes. If provided, we will automatically sync whoever is on call to the user group in Slack.
	SlackUserGroupID *string `json:"slack_user_group_id,omitempty"`
	// An ordered list of objects that specify members of the on-call schedule's rotation.
	Members []PatchV1TeamsTeamIDOnCallSchedulesScheduleIDMembers `json:"members,omitempty"`
	// An object that specifies how the schedule's on-call shifts should be generated.
	Strategy *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy `json:"strategy,omitempty"`
	// A list of objects that restrict the schedule to speccific on-call periods.
	Restrictions []PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictions `json:"restrictions,omitempty"`
	// An ISO8601 time string specifying when the updated schedule should take effect. This
	// value must be provided if editing an attribute that would affect how the schedule's
	// shifts are generated, such as the time zone, members, strategy, or restrictions.
	//
	EffectiveAt *string `json:"effective_at,omitempty"`
	// A hex color code that will be used to represent the schedule in the UI and iCal subscriptions.
	Color *string `json:"color,omitempty"`
	// This parameter is deprecated; use `members` instead.
	MemberIds []string `json:"member_ids,omitempty"`
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetTimeZone() *string {
	if o == nil {
		return nil
	}
	return o.TimeZone
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetSlackUserGroupID() *string {
	if o == nil {
		return nil
	}
	return o.SlackUserGroupID
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetMembers() []PatchV1TeamsTeamIDOnCallSchedulesScheduleIDMembers {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetStrategy() *PatchV1TeamsTeamIDOnCallSchedulesScheduleIDStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetRestrictions() []PatchV1TeamsTeamIDOnCallSchedulesScheduleIDRestrictions {
	if o == nil {
		return nil
	}
	return o.Restrictions
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetEffectiveAt() *string {
	if o == nil {
		return nil
	}
	return o.EffectiveAt
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *PatchV1TeamsTeamIDOnCallSchedulesScheduleID) GetMemberIds() []string {
	if o == nil {
		return nil
	}
	return o.MemberIds
}
