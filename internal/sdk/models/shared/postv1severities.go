// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Color string

const (
	ColorRed    Color = "red"
	ColorOrange Color = "orange"
	ColorYellow Color = "yellow"
	ColorBlue   Color = "blue"
	ColorTeal   Color = "teal"
	ColorGrey   Color = "grey"
)

func (e Color) ToPointer() *Color {
	return &e
}
func (e *Color) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "red":
		fallthrough
	case "orange":
		fallthrough
	case "yellow":
		fallthrough
	case "blue":
		fallthrough
	case "teal":
		fallthrough
	case "grey":
		*e = Color(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Color: %v", v)
	}
}

// PostV1Severities - Create a new severity
type PostV1Severities struct {
	Slug        string  `json:"slug"`
	Description *string `json:"description,omitempty"`
	Position    *int    `json:"position,omitempty"`
	Color       *Color  `json:"color,omitempty"`
}

func (o *PostV1Severities) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *PostV1Severities) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PostV1Severities) GetPosition() *int {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *PostV1Severities) GetColor() *Color {
	if o == nil {
		return nil
	}
	return o.Color
}
