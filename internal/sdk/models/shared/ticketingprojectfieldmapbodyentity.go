// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TicketingProjectFieldMapBodyEntityStrategy string

const (
	TicketingProjectFieldMapBodyEntityStrategyBasic TicketingProjectFieldMapBodyEntityStrategy = "basic"
	TicketingProjectFieldMapBodyEntityStrategyLogic TicketingProjectFieldMapBodyEntityStrategy = "logic"
)

func (e TicketingProjectFieldMapBodyEntityStrategy) ToPointer() *TicketingProjectFieldMapBodyEntityStrategy {
	return &e
}
func (e *TicketingProjectFieldMapBodyEntityStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "logic":
		*e = TicketingProjectFieldMapBodyEntityStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TicketingProjectFieldMapBodyEntityStrategy: %v", v)
	}
}

type UserData struct {
}

type TicketingProjectFieldMapBodyEntity struct {
	Strategy      *TicketingProjectFieldMapBodyEntityStrategy  `json:"strategy,omitempty"`
	ExternalField *string                                      `json:"external_field,omitempty"`
	ExternalValue *TicketingProjectFieldMapExternalValueEntity `json:"external_value,omitempty"`
	UserData      *UserData                                    `json:"user_data,omitempty"`
	Cases         []TicketingProjectFieldMapCasesEntity        `json:"cases,omitempty"`
	Else          *TicketingProjectFieldMapCasesElseEntity     `json:"else,omitempty"`
}

func (o *TicketingProjectFieldMapBodyEntity) GetStrategy() *TicketingProjectFieldMapBodyEntityStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *TicketingProjectFieldMapBodyEntity) GetExternalField() *string {
	if o == nil {
		return nil
	}
	return o.ExternalField
}

func (o *TicketingProjectFieldMapBodyEntity) GetExternalValue() *TicketingProjectFieldMapExternalValueEntity {
	if o == nil {
		return nil
	}
	return o.ExternalValue
}

func (o *TicketingProjectFieldMapBodyEntity) GetUserData() *UserData {
	if o == nil {
		return nil
	}
	return o.UserData
}

func (o *TicketingProjectFieldMapBodyEntity) GetCases() []TicketingProjectFieldMapCasesEntity {
	if o == nil {
		return nil
	}
	return o.Cases
}

func (o *TicketingProjectFieldMapBodyEntity) GetElse() *TicketingProjectFieldMapCasesElseEntity {
	if o == nil {
		return nil
	}
	return o.Else
}
